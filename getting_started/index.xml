<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Enzyme AD</title><link>//enzyme.mit.edu/getting_started/</link><description>Recent content in Getting Started on Enzyme AD</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="//enzyme.mit.edu/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>//enzyme.mit.edu/getting_started/Installation/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/Installation/</guid><description>Downloading Enzyme To start you should download Enzyme&amp;rsquo;s code Github .
git clone https://github.com/wsmoses/Enzyme cd Enzyme Building LLVM Enzyme is a plugin for LLVM and consequently needs an existing build of LLVM to function. You can either build the fork of LLVM-7 available inside of Enzyme&amp;rsquo;s repository (this allows you to use custom C/C++ syntactic sugar for calling Enzyme), or your choice of an existing build of LLVM.
Enzyme is designed to work with a wide range of LLVM versions and is currently tested against LLVM 6, 7, and 8.</description></item><item><title>Calling Enzyme</title><link>//enzyme.mit.edu/getting_started/CallingEnzyme/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/CallingEnzyme/</guid><description>Generating LLVM To begin, let&amp;rsquo;s create a simple code test.c we want to differentiate. Enzyme will replace any calls to functions whose names start as &amp;ldquo;__enzyme_autodiff&amp;rdquo; with calls to the corresponding For now, let&amp;rsquo;s ignore the details of Enzyme&amp;rsquo;s calling convention/ABI which are described in detail here // test.c #include &amp;lt;stdio.h&amp;gt;extern double __enzyme_autodiff(void*, double); double square(double x) { return x * x; } double dsquare(double x) { return __enzyme_autodiff(square, x); } int main() { for(double i=1; i&amp;lt;5; i++) printf(&amp;#34;square(%f)=%f, dsquare(%f)=%f&amp;#34;, i, square(i), i, dsquare(i)); } We can generate LLVM from this code by calling clang as follows.</description></item><item><title>Calling Convention</title><link>//enzyme.mit.edu/getting_started/CallingConvention/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/CallingConvention/</guid><description>Calling Convention TODO</description></item><item><title>FAQ</title><link>//enzyme.mit.edu/getting_started/Faq/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/Faq/</guid><description>TODO
What is the difference between the Tensor and Vector types? Conceptual: vectors are meant to and occur in lower level dialects - often where you expect hardware to have registers of that size. Tensors model higher-level &amp;ldquo;closer to the source&amp;rdquo; abstract representation. This is reflected in the abstraction modeled by the operations from the vector dialect , while Tensors would be more naturally present in the operations of the `linalg dialect .</description></item><item><title>Developer Guide</title><link>//enzyme.mit.edu/getting_started/DeveloperGuide/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/DeveloperGuide/</guid><description>TODO
This document attempts to describe a few developer policies used in MLIR (such as coding standards used) as well as development approach (such as, testing methods).
Style guide MLIR follows the LLVM style guide. We also adhere to the following (which deviate from or are not specified in the LLVM style guide):
Adopts camelBack ; Uses Doxygen-style (///) comments for top-level and class member definitions, regardless of them being visible as public APIs.</description></item><item><title>How to Contribute</title><link>//enzyme.mit.edu/getting_started/Contributing/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>//enzyme.mit.edu/getting_started/Contributing/</guid><description>TODO
Everyone is welcome to contribute to MLIR. There are several ways of getting involved and contributing including reporting bugs, improving documentation and tutorials.
Community Guidelines Please be mindful of the LLVM Code of Conduct , which pledges to foster an open and welcoming environment.
Contributing code We don&amp;rsquo;t accept pull-request on GitHub, instead we use Phabricator . At the moment you need to also join this group to enable build and test of your Phabricator revisions.</description></item></channel></rss>
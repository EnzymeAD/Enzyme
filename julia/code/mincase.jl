using LLVM
using LLVM.Interop
import MCAnalyzer: irgen

@generated function autodiff(f, args...)
    # Obtain the function and all it's dependencies in one handy module
    duplicated = []
	autodifftypes = Type[f]
	i = 1
	while i <= length(args)
		if <:(args[i], Array)
			push!(duplicated, true)
			push!(autodifftypes, args[i])
			i+=1
		else
			push!(duplicated, false)
			push!(autodifftypes, args[i])
		end
		i+=1
	end
    
	mod, ccf = irgen(Tuple{autodifftypes...}) 

    ctx = context(mod)
    rettype = convert(LLVMType, Float64)
    argtypes2 = LLVMType[convert(LLVMType, T, true) for T in args]

    # TODO get function type from ccf
    ft2  = LLVM.FunctionType(rettype, argtypes2)

    # create a wrapper Function that we will inline into the llvmcall
    # generated by in the end `call_function`
    llvmf = LLVM.Function(mod, "", ft2)
    push!(function_attributes(llvmf), EnumAttribute("alwaysinline", 0, ctx))
    linkage!(llvmf, LLVM.API.LLVMPrivateLinkage)

    # Create the FunctionType and funtion decleration for the intrinsic
    pt       = LLVM.PointerType(LLVM.Int8Type(ctx))
    ftd      = LLVM.FunctionType(rettype, LLVMType[pt], true)
    autodiff = LLVM.Function(mod, "llvm.autodiff.p0i8", ftd)


    	params = LLVM.Value[]
		i = 1
		j = 1
		llvm_params = parameters(llvmf)
		while j < length(args)
			if duplicated[i]
				push!(params, MDString("diffe_dup"))
				push!(params, llvm_params[j])
				j+=1
			end
			push!(params, llvm_params[j])
			j+=1
			i+=1
		end

    Builder(ctx) do builder
        entry = BasicBlock(llvmf, "entry", ctx)
        position!(builder, entry)

        tc = bitcast!(builder, ccf, pt)
        pushfirst!(params, tc)

        val = call!(builder, autodiff, params)

        #if T === Nothing
        #    ret!(builder)
        #else
            ret!(builder, val)
        #end
    end

    println(mod)
    _args = (:(args[$i]) for i in 1:length(args))
    call_function(llvmf, Float64, Tuple{args...}, Expr(:tuple, _args...))
end

function jl_f2(f::Float64)
    f * f
end

using InteractiveUtils

#@show jl_f2(1.0)
#@code_llvm jl_f2(1.0)
#autodiff(jl_f2, 1.0)

@code_llvm dump_module=true autodiff(jl_f2, 1.0)


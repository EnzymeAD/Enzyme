//===- RemoveUnusedEnzymeOps.cpp - Remove unnecessary or unused gradient and cache ops
//------------------ //
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements a pass to lower custom ops generated by the Enzyme AD
// procedure to the MemRef dialect.
//===----------------------------------------------------------------------===//

#include "Dialect/Dialect.h"
#include "Dialect/Ops.h"
#include "PassDetails.h"
#include "Passes/Passes.h"
#include "mlir/Dialect/Arith/IR/Arith.h"
#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
#include "mlir/Dialect/Func/IR/FuncOps.h"
#include "mlir/Dialect/MemRef/IR/MemRef.h"
#include "mlir/Dialect/SCF/IR/SCF.h"
#include "mlir/Transforms/DialectConversion.h"

#include "mlir/Rewrite/PatternApplicator.h"

#include "llvm/Support/raw_ostream.h"
#include "mlir/IR/Dominance.h"

using namespace mlir;
using namespace enzyme;
using llvm::errs;
namespace {

// TODO: Expand to region branches??
bool reachable(Operation * a, Operation * b){
  Block * aBlock = a->getBlock();
  Block * bBlock = b->getBlock();
  if (aBlock == bBlock){
    if(a->isBeforeInBlock(b)){
      return true;
    }
  }
  DenseSet<Block *> visitedBlocks;
  SmallVector<Block *> blocksToVisit;

  blocksToVisit.push_back(aBlock);
  while (!blocksToVisit.empty()){
    Block * processedBlock = blocksToVisit[blocksToVisit.size()-1];
    blocksToVisit.pop_back();

    for(Block * successor : processedBlock->getSuccessors()){
      if (!visitedBlocks.contains(successor)){
        visitedBlocks.insert(successor);
        blocksToVisit.push_back(successor);

        if (successor == bBlock) return true;
      }
    }
  }
  return false;
}

struct RemoveUnusedEnzymeOpsPass
    : public enzyme::RemoveUnusedEnzymeOpsPassBase<
          RemoveUnusedEnzymeOpsPass> {
  void runOnOperation() override {
    MLIRContext *context = &getContext();
    ConversionPatternRewriter rewriter(context);

    getOperation()->walk([&](Operation *op) {
        DominanceInfo dInfo;
        if (auto initOp = dyn_cast<enzyme::InitOp>(op)) {
          if (auto type = dyn_cast<enzyme::GradientType>(initOp.getType())) {
            Value v = initOp;
            bool replaceable = true;
            for(Operation * userSet : v.getUsers()){
              if (auto setOp = dyn_cast<enzyme::SetOp>(userSet)) {
                for(Operation * userGet : v.getUsers()){
                  if (auto getOp = dyn_cast<enzyme::GetOp>(userGet)) {
                    bool propertyA = dInfo.dominates(userSet, userGet) && !reachable(getOp, setOp);
                    bool propertyB = !reachable(setOp, getOp);
                    if (!propertyA && !propertyB){
                      replaceable = false;
                    }
                  }
                }
              }
            }
            if(replaceable){
              // Do replacing
              for(Operation * userGet : v.getUsers()){
                if (auto getOp = dyn_cast<enzyme::GetOp>(userGet)) {
                  Operation * closestSetOp = nullptr;
                  for(Operation * userSet : v.getUsers()){
                    if (auto setOp = dyn_cast<enzyme::SetOp>(userSet)) {
                      if (dInfo.dominates(userSet, userGet)){
                        if (closestSetOp == nullptr){
                          closestSetOp = userSet;
                        }
                        else if (dInfo.dominates(closestSetOp, userSet)){
                          closestSetOp = userSet;
                        }
                      }
                    }
                  }
                  auto setOp = dyn_cast<enzyme::SetOp>(closestSetOp);
                  getOp.replaceAllUsesWith(setOp.getValue());
                }
                userGet->erase();
              }
            }
          }
        }
    });
  };
};
} // end anonymous namespace

namespace mlir {
namespace enzyme {
std::unique_ptr<Pass> createRemoveUnusedEnzymeOpsPass() {
  return std::make_unique<RemoveUnusedEnzymeOpsPass>();
}
} // namespace enzyme
} // namespace mlir

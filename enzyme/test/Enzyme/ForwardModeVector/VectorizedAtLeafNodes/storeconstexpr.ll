; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -mem2reg -sroa -simplifycfg -instcombine -adce -S | FileCheck %s

; Function Attrs: nounwind
declare void @__enzyme_fwddiff(i8*, ...)

@.str = private unnamed_addr constant [18 x i8] c"W(o=%d, i=%d)=%f\0A\00", align 1

define void @derivative(i64* %from, <3 x i64>* %fromp, i64* %to, <3 x i64>* %top) {
entry:
  call void (i8*, ...) @__enzyme_fwddiff(i8* bitcast (void (i64*, i64*)* @callee to i8*), metadata !"enzyme_width", i64 3, metadata !"enzyme_dup", i64* %from, <3 x i64>* %fromp, metadata !"enzyme_dup", i64* %to, <3 x i64>* %top)
  ret void
}

define void @callee(i64* %from, i64* %to) {
entry:
  store i64 ptrtoint ([18 x i8]* @.str to i64), i64* %to
  ret void
}


; CHECK: define internal void @fwddiffe3callee(i64* %from, <3 x i64>* %"from'", i64* %to, <3 x i64>* %"to'")
; CHECK-NEXT:  entry:
; CHECK-NEXT:   store i64 ptrtoint ([18 x i8]* @.str to i64), i64* %to, align 4
; CHECK-NEXT:   store <3 x i64> <i64 ptrtoint ([18 x i8]* @.str to i64), i64 ptrtoint ([18 x i8]* @.str to i64), i64 ptrtoint ([18 x i8]* @.str to i64)>, <3 x i64>* %"to'", align 4
; CHECK-NEXT:   ret void
; CHECK-NEXT: }
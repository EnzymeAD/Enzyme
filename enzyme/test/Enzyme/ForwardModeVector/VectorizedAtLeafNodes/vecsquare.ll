; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -mem2reg -S | FileCheck %s

declare {<2 x float>, <2 x float>, <2 x float>} @__enzyme_fwddiff({float, float, float} (<4 x float>)*, ...)

define {float, float, float} @square(<4 x float> %x) {
entry:
  %vec = insertelement <4 x float> %x, float 1.0, i32 3
  %sq = fmul <4 x float> %x, %x
  %cb = fmul <4 x float> %sq, %x
  %id = shufflevector <4 x float> %sq, <4 x float> %cb, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %res1 = extractelement <4 x float> %id, i32 1
  %res2 = extractelement <4 x float> %id, i32 2
  %res3 = extractelement <4 x float> %id, i32 3
  %agg1 = insertvalue {float, float, float} undef, float %res1, 0
  %agg2 = insertvalue {float, float, float} %agg1, float %res2, 1
  %agg3 = insertvalue {float, float, float} %agg2, float %res3, 2
  ret {float, float, float} %agg3
}

define {<2 x float>, <2 x float>, <2 x float>} @dsquare(<4 x float> %x) {
entry:
  %call = tail call {<2 x float>, <2 x float>, <2 x float>} ({float, float, float} (<4 x float>)*, ...) @__enzyme_fwddiff({float, float, float} (<4 x float>)* @square, metadata !"enzyme_width", i64 2, <4 x float> %x, <8 x float> <float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0>)
  ret {<2 x float>, <2 x float>, <2 x float>} %call
}


; CHECK: define internal { <2 x float>, <2 x float>, <2 x float> } @fwddiffe2square(<4 x float> %x, <8 x float> %"x'")
; CHECK-NEXT:  entry:
; CHECK-NEXT:   %sq = fmul <4 x float> %x, %x
; CHECK-NEXT:   %x.vecsplat = shufflevector <4 x float> %x, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %x.vecsplat1 = shufflevector <4 x float> %x, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %0 = fmul fast <8 x float> %"x'", %x.vecsplat1
; CHECK-NEXT:   %1 = fmul fast <8 x float> %"x'", %x.vecsplat
; CHECK-NEXT:   %2 = fadd fast <8 x float> %0, %1
; CHECK-NEXT:   %cb = fmul <4 x float> %sq, %x
; CHECK-NEXT:   %sq.vecsplat = shufflevector <4 x float> %sq, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %x.vecsplat2 = shufflevector <4 x float> %x, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %3 = fmul fast <8 x float> %2, %x.vecsplat2
; CHECK-NEXT:   %4 = fmul fast <8 x float> %"x'", %sq.vecsplat
; CHECK-NEXT:   %5 = fadd fast <8 x float> %3, %4
; CHECK-NEXT:   %"id'ipsv" = shufflevector <8 x float> %2, <8 x float> %5, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 4, i32 5, i32 8, i32 9>
; CHECK-NEXT:   %"id'ipsv.subvector.0" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %"res1'ipee" = extractelement <4 x float> %"id'ipsv.subvector.0", i32 1
; CHECK-NEXT:   %6 = insertelement <2 x float> undef, float %"res1'ipee", i32 0
; CHECK-NEXT:   %"id'ipsv.subvector.1" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:   %"res1'ipee3" = extractelement <4 x float> %"id'ipsv.subvector.1", i32 1
; CHECK-NEXT:   %7 = insertelement <2 x float> %6, float %"res1'ipee3", i32 1
; CHECK-NEXT:   %"id'ipsv.subvector.04" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %"res2'ipee" = extractelement <4 x float> %"id'ipsv.subvector.04", i32 2
; CHECK-NEXT:   %8 = insertelement <2 x float> undef, float %"res2'ipee", i32 0
; CHECK-NEXT:   %"id'ipsv.subvector.15" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:   %"res2'ipee6" = extractelement <4 x float> %"id'ipsv.subvector.15", i32 2
; CHECK-NEXT:   %9 = insertelement <2 x float> %8, float %"res2'ipee6", i32 1
; CHECK-NEXT:   %"id'ipsv.subvector.07" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   %"res3'ipee" = extractelement <4 x float> %"id'ipsv.subvector.07", i32 3
; CHECK-NEXT:   %10 = insertelement <2 x float> undef, float %"res3'ipee", i32 0
; CHECK-NEXT:   %"id'ipsv.subvector.18" = shufflevector <8 x float> %"id'ipsv", <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:   %"res3'ipee9" = extractelement <4 x float> %"id'ipsv.subvector.18", i32 3
; CHECK-NEXT:   %11 = insertelement <2 x float> %10, float %"res3'ipee9", i32 1
; CHECK-NEXT:   %"agg1'ipiv" = insertvalue { <2 x float>, <2 x float>, <2 x float> } zeroinitializer, <2 x float> %7, 0
; CHECK-NEXT:   %"agg2'ipiv" = insertvalue { <2 x float>, <2 x float>, <2 x float> } %"agg1'ipiv", <2 x float> %9, 1
; CHECK-NEXT:   %"agg3'ipiv" = insertvalue { <2 x float>, <2 x float>, <2 x float> } %"agg2'ipiv", <2 x float> %11, 2
; CHECK-NEXT:   ret { <2 x float>, <2 x float>, <2 x float> } %"agg3'ipiv"
; CHECK-NEXT: }
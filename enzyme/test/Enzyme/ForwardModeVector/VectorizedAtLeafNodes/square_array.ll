; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function fwddiffe3squared --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false  -enzyme-vectorize-at-leaf-nodes  -mem2reg -simplifycfg -early-cse -S | FileCheck %s

define { double, double } @squared(double %x) {
entry:
  %mul = fmul double %x, %x
  %mul2 = fmul double %mul, %x
  %.fca.0.insert = insertvalue { double, double } undef, double %mul, 0
  %.fca.1.insert = insertvalue { double, double } %.fca.0.insert, double %mul2, 1
  ret { double, double } %.fca.1.insert
}

define { <3 x double>, <3 x double> } @dsquared(double %x) {
entry:
  %call = call { <3 x double>, <3 x double> } (i8*, ...) @__enzyme_fwddiff(i8* bitcast ({ double, double } (double)* @squared to i8*), metadata !"enzyme_width", i64 3, double %x, <3 x double> <double 1.0, double 2.0, double 3.0>)
  ret { <3 x double>, <3 x double> } %call
}

declare { <3 x double>, <3 x double> } @__enzyme_fwddiff(i8*, ...)


; CHECK: define internal { <3 x double>, <3 x double> } @fwddiffe3squared(double %x, <3 x double> %"x'")
; CHECK-NEXT:  entry:
; CHECK-NEXT:   %mul = fmul double %x, %x
; CHECK-NEXT:   %.splatinsert = insertelement <3 x double> poison, double %x, i32 0
; CHECK-NEXT:   %.splat = shufflevector <3 x double> %.splatinsert, <3 x double> poison, <3 x i32> zeroinitializer
; CHECK-NEXT:   %0 = fmul fast <3 x double> %"x'", %.splat
; CHECK-NEXT:   %1 = fadd fast <3 x double> %0, %0
; CHECK-NEXT:   %.splatinsert3 = insertelement <3 x double> poison, double %mul, i32 0
; CHECK-NEXT:   %.splat4 = shufflevector <3 x double> %.splatinsert3, <3 x double> poison, <3 x i32> zeroinitializer
; CHECK-NEXT:   %2 = fmul fast <3 x double> %1, %.splat
; CHECK-NEXT:   %3 = fmul fast <3 x double> %"x'", %.splat4
; CHECK-NEXT:   %4 = fadd fast <3 x double> %2, %3
; CHECK-NEXT:   %".fca.0.insert'ipiv" = insertvalue { <3 x double>, <3 x double> } zeroinitializer, <3 x double> %1, 0
; CHECK-NEXT:   %".fca.1.insert'ipiv" = insertvalue { <3 x double>, <3 x double> } %".fca.0.insert'ipiv", <3 x double> %4, 1
; CHECK-NEXT:   ret { <3 x double>, <3 x double> } %".fca.1.insert'ipiv"
; CHECK-NEXT: }
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -mem2reg -instsimplify -simplifycfg -S | FileCheck %s

@global = external dso_local local_unnamed_addr global double, align 8, !enzyme_shadow !{<3 x double>* @dglobal }
@dglobal = external dso_local local_unnamed_addr global <3 x double>, align 8

declare dso_local <3 x double> @_Z22__enzyme_fwddiffPFddEz(double (double)*, ...)

define dso_local double @_Z9mulglobald(double %x) {
entry:
  %0 = load double, double* @global, align 8
  %mul = fmul double %0, %x
  ret double %mul
}

define dso_local void @_Z10derivatived(double %x) {
entry:
  call <3 x double> (double (double)*, ...) @_Z22__enzyme_fwddiffPFddEz(double (double)* nonnull @_Z9mulglobald, metadata !"enzyme_width", i64 3, double %x, <3 x double> <double 1.0 , double 2.0, double 3.0>)
  ret void
}


; CHECK: define internal <3 x double> @fwddiffe3_Z9mulglobald(double %x, <3 x double> %"x'")
; CHECK-NEXT:  entry:
; CHECK-NEXT:   %"'ipl" = load <3 x double>, <3 x double>* @dglobal, align 8
; CHECK-NEXT:   %0 = load double, double* @global, align 8
; CHECK-NEXT:   %.splatinsert = insertelement <3 x double> poison, double %0, i32 0
; CHECK-NEXT:   %.splat = shufflevector <3 x double> %.splatinsert, <3 x double> poison, <3 x i32> zeroinitializer
; CHECK-NEXT:   %.splatinsert1 = insertelement <3 x double> poison, double %x, i32 0
; CHECK-NEXT:   %.splat2 = shufflevector <3 x double> %.splatinsert1, <3 x double> poison, <3 x i32> zeroinitializer
; CHECK-NEXT:   %1 = fmul fast <3 x double> %"'ipl", %.splat2
; CHECK-NEXT:   %2 = fmul fast <3 x double> %"x'", %.splat
; CHECK-NEXT:   %3 = fadd fast <3 x double> %1, %2
; CHECK-NEXT:   ret <3 x double> %3
; CHECK-NEXT: }
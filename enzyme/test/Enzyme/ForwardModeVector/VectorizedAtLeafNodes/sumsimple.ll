; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -inline -mem2reg -instsimplify -adce -loop-deletion -correlated-propagation -simplifycfg -early-cse -S | FileCheck %s

; Function Attrs: nounwind
declare <3 x double> @__enzyme_fwddiff(i8*, ...)

; Function Attrs: noinline nounwind uwtable
define dso_local void @f(double* %x, double** %y, i64 %n) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp ule i64 %i.0, %n
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds double, double* %x, i64 0
  %0 = load double, double* %arrayidx
  %1 = load double*, double** %y
  %2 = load double, double* %1
  %add = fadd fast double %2, %0
  store double %add, double* %1
  %inc = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local <3 x double> @dsumsquare(double* %x, <3 x double>* %xp, double** %y, <3 x double>** %yp, i64 %n) #0 {
entry:
  %call = call <3 x double> (i8*, ...) @__enzyme_fwddiff(i8* bitcast (void (double*, double**, i64)* @f to i8*), metadata !"enzyme_width", i64 3, double* %x, <3 x double>* %xp, double** %y, <3 x double>** %yp, i64 %n)
  ret <3 x double> %call
}

attributes #0 = { noinline nounwind uwtable }


; CHECK: define internal void @fwddiffe3f(double* %x, <3 x double>* %"x'", double** %y, <3 x double>** %"y'", i64 %n)
; CHECK-NEXT: entry:
; CHECK-NEXT:   %0 = add nuw i64 %n, 1
; CHECK-NEXT:   br label %for.cond

; CHECK: for.cond:                                         ; preds = %for.body, %entry
; CHECK-NEXT:   %iv = phi i64 [ %iv.next, %for.body ], [ 0, %entry ]
; CHECK-NEXT:   %iv.next = add nuw nsw i64 %iv, 1
; CHECK-NEXT:   %cmp = icmp ne i64 %iv, %0
; CHECK-NEXT:   br i1 %cmp, label %for.body, label %for.end

; CHECK: for.body:                                         ; preds = %for.cond
; CHECK-NEXT:   %"'ipl" = load <3 x double>, <3 x double>* %"x'", align 8
; CHECK-NEXT:   %1 = load double, double* %x, align 8
; CHECK-NEXT:   %"'ipl3" = load <3 x double>*, <3 x double>** %"y'", align 8
; CHECK-NEXT:   %2 = load double*, double** %y, align 8
; CHECK-NEXT:   %"'ipl4" = load <3 x double>, <3 x double>* %"'ipl3", align 8
; CHECK-NEXT:   %3 = load double, double* %2, align 8
; CHECK-NEXT:   %add = fadd fast double %3, %1
; CHECK-NEXT:   %4 = fadd fast <3 x double> %"'ipl4", %"'ipl"
; CHECK-NEXT:   store double %add, double* %2, align 8
; CHECK-NEXT:   store <3 x double> %4, <3 x double>* %"'ipl3", align 8
; CHECK-NEXT:   br label %for.cond

; CHECK: for.end:                                          ; preds = %for.cond
; CHECK-NEXT:   ret void
; CHECK-NEXT: }
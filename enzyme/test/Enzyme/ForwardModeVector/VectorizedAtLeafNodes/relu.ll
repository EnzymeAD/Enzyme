; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function drelu
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -mem2reg -inline -early-cse -instcombine -simplifycfg -S | FileCheck %s

; Function Attrs: nounwind
declare <2 x double> @__enzyme_fwddiff(double (double)*, ...)


define dso_local double @f(double %x) #1 {
entry:
  ret double %x
}

define dso_local double @relu(double %x) {
entry:
  %cmp = fcmp fast ogt double %x, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.end

cond.true:                                        ; preds = %entry
  %call = tail call fast double @f(double %x)
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi double [ %call, %cond.true ], [ 0.000000e+00, %entry ]
  ret double %cond
}

define dso_local <2 x double> @drelu(double %x) {
;
entry:
  %0 = tail call <2 x double> (double (double)*, ...) @__enzyme_fwddiff(double (double)* nonnull @relu, metadata !"enzyme_width", i64 2, double %x, <2 x double> <double 0.0, double 1.0>)
  ret <2 x double> %0
}

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone noinline }


; CHECK: define dso_local <2 x double> @drelu(double %x)
; CHECK-NEXT:  entry:
; CHECK-NEXT:   %cmp.i = fcmp fast ogt double %x, 0.000000e+00
; CHECK-NEXT:   br i1 %cmp.i, label %cond.true.i, label %fwddiffe2relu.exit

; CHECK: cond.true.i:                                      ; preds = %entry
; CHECK-NEXT:   %0 = call fast <2 x double> @fwddiffe2f(double %x, <2 x double> <double 0.000000e+00, double 1.000000e+00>)
; CHECK-NEXT:   br label %fwddiffe2relu.exit

; CHECK: fwddiffe2relu.exit:                               ; preds = %entry, %cond.true.i
; CHECK-NEXT:   %1 = phi fast <2 x double> [ %0, %cond.true.i ], [ zeroinitializer, %entry ]
; CHECK-NEXT:   ret <2 x double> %1
; CHECK-NEXT: }
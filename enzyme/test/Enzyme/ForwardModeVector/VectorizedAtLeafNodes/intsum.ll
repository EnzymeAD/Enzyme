; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -enzyme-vectorize-at-leaf-nodes -mem2reg -instsimplify -adce -correlated-propagation -simplifycfg -adce -S | FileCheck %s

%struct.Gradients = type { [3 x float]* }

; Function Attrs: nounwind
declare void @__enzyme_fwddiff(void (float*, float*)*, ...)

define dso_local void @sum(float* %array, float* %ret) #4 {
entry:
  br label %do.body

do.body:                                          ; preds = %do.body, %entry
  %i = phi i64 [ %inc, %do.body ], [ 0, %entry ]
  %intsum = phi i32 [ 0, %entry ], [ %intadd, %do.body ]
  %arrayidx = getelementptr inbounds float, float* %array, i64 %i
  %loaded = load float, float* %arrayidx
  %fltload = bitcast i32 %intsum to float
  %add = fadd float %fltload, %loaded
  %intadd = bitcast float %add to i32
  %inc = add nuw nsw i64 %i, 1
  %cmp = icmp eq i64 %inc, 5
  br i1 %cmp, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  %lcssa = phi float [ %add, %do.body ]
  store float %lcssa, float* %ret, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @dsum(float* %x, [3 x float]* %xp, float* %n, [3 x float]* %np) local_unnamed_addr #1 {
entry:
  tail call void (void (float*, float*)*, ...) @__enzyme_fwddiff(void (float*, float*)* nonnull @sum, metadata !"enzyme_width", i64 3, float* %x, [3 x float]* %xp, float* %n, [3 x float]* %np)
  ret void
}


; CHECK: define internal void @fwddiffe3sum(float* %array, [3 x float]* %"array'", float* %ret, [3 x float]* %"ret'") #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:   br label %do.body

; CHECK: do.body:                                          ; preds = %do.body, %entry
; CHECK-NEXT:   %iv = phi i64 [ %iv.next, %do.body ], [ 0, %entry ]
; CHECK-NEXT:   %0 = phi [3 x i32] [ zeroinitializer, %entry ], [ %15, %do.body ]
; CHECK-NEXT:   %intsum = phi i32 [ 0, %entry ], [ %intadd, %do.body ]
; CHECK-NEXT:   %iv.next = add nuw nsw i64 %iv, 1
; CHECK-NEXT:   %"arrayidx'ipg" = getelementptr inbounds [3 x float], [3 x float]* %"array'", i64 %iv
; CHECK-NEXT:   %arrayidx = getelementptr inbounds float, float* %array, i64 %iv
; CHECK-NEXT:   %"loaded'ipl" = load [3 x float], [3 x float]* %"arrayidx'ipg"
; CHECK-NEXT:   %loaded = load float, float* %arrayidx
; CHECK-NEXT:   %1 = extractvalue [3 x i32] %0, 0
; CHECK-NEXT:   %"fltload'ipc" = bitcast i32 %1 to float
; CHECK-NEXT:   %2 = extractvalue [3 x i32] %0, 1
; CHECK-NEXT:   %"fltload'ipc1" = bitcast i32 %2 to float
; CHECK-NEXT:   %3 = extractvalue [3 x i32] %0, 2
; CHECK-NEXT:   %"fltload'ipc2" = bitcast i32 %3 to float
; CHECK-NEXT:   %fltload = bitcast i32 %intsum to float
; CHECK-NEXT:   %add = fadd float %fltload, %loaded
; CHECK-NEXT:   %4 = extractvalue [3 x float] %"loaded'ipl", 0
; CHECK-NEXT:   %5 = fadd fast float %"fltload'ipc", %4
; CHECK-NEXT:   %6 = insertvalue [3 x float] undef, float %5, 0
; CHECK-NEXT:   %7 = extractvalue [3 x float] %"loaded'ipl", 1
; CHECK-NEXT:   %8 = fadd fast float %"fltload'ipc1", %7
; CHECK-NEXT:   %9 = insertvalue [3 x float] %6, float %8, 1
; CHECK-NEXT:   %10 = extractvalue [3 x float] %"loaded'ipl", 2
; CHECK-NEXT:   %11 = fadd fast float %"fltload'ipc2", %10
; CHECK-NEXT:   %12 = insertvalue [3 x float] %9, float %11, 2
; CHECK-NEXT:   %"intadd'ipc" = bitcast float %5 to i32
; CHECK-NEXT:   %13 = insertvalue [3 x i32] undef, i32 %"intadd'ipc", 0
; CHECK-NEXT:   %"intadd'ipc3" = bitcast float %8 to i32
; CHECK-NEXT:   %14 = insertvalue [3 x i32] %13, i32 %"intadd'ipc3", 1
; CHECK-NEXT:   %"intadd'ipc4" = bitcast float %11 to i32
; CHECK-NEXT:   %15 = insertvalue [3 x i32] %14, i32 %"intadd'ipc4", 2
; CHECK-NEXT:   %intadd = bitcast float %add to i32
; CHECK-NEXT:   %cmp = icmp eq i64 %iv.next, 5
; CHECK-NEXT:   br i1 %cmp, label %do.end, label %do.body

; CHECK: do.end:                                           ; preds = %do.body
; CHECK-NEXT:   store float %add, float* %ret
; CHECK-NEXT:   store [3 x float] %12, [3 x float]* %"ret'"
; CHECK-NEXT:   ret void
; CHECK-NEXT: }

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -mem2reg -instsimplify -adce -correlated-propagation -simplifycfg -gvn -dse -S | FileCheck %s

%struct.Gradients = type { double, double, double }

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local double @f(double* noalias nocapture %out, double %x) #0 {
entry:
  store double %x, double* %out, align 8
  store double 0.000000e+00, double* %out, align 8
  %res = load double, double* %out
  ret double %res
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Gradients @dsumsquare(double* %x, double* %xp1, double* %xp2, double* %xp3, double %inp, double %in1, double %in2, double %in3) local_unnamed_addr #1 {
entry:
  %call = tail call %struct.Gradients (i8*, ...) @__enzyme_fwddiff(i8* bitcast (double (double*, double)* @f to i8*), metadata !"enzyme_width", i64 3, double* %x, double* %xp1, double* %xp2, double* %xp3, double %inp, double %in1, double %in2, double %in3)
  ret %struct.Gradients %call
}

declare dso_local %struct.Gradients @__enzyme_fwddiff(i8*, ...) local_unnamed_addr

attributes #0 = { noinline norecurse nounwind uwtable }
attributes #1 = { noinline nounwind uwtable }

; CHECK: define {{[^@]+}}@fwddiffe3f(double* noalias nocapture [[OUT:%.*]], [3 x double*] %"out'", double [[X:%.*]], [3 x double] %"x'") 
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = extractvalue [3 x double*] %"out'", 0
; CHECK-NEXT:    [[TMP1:%.*]] = extractvalue [3 x double*] %"out'", 1
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [3 x double*] %"out'", 2
; CHECK-NEXT:    store double 0.000000e+00, double* [[OUT]], align 8
; CHECK-NEXT:    store double 0.000000e+00, double* [[TMP0]], align 8
; CHECK-NEXT:    store double 0.000000e+00, double* [[TMP1]], align 8
; CHECK-NEXT:    store double 0.000000e+00, double* [[TMP2]], align 8
; CHECK-NEXT:    %"res'ipl" = load double, double* [[TMP0]]
; CHECK-NEXT:    [[TMP3:%.*]] = insertvalue [3 x double] undef, double %"res'ipl", 0
; CHECK-NEXT:    %"res'ipl1" = load double, double* [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = insertvalue [3 x double] [[TMP3]], double %"res'ipl1", 1
; CHECK-NEXT:    [[TMP5:%.*]] = insertvalue [3 x double] [[TMP4]], double 0.000000e+00, 2
; CHECK-NEXT:    ret [3 x double] [[TMP5]]
;

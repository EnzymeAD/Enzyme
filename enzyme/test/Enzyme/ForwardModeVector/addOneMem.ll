; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: %opt < %s %loadEnzyme -enzyme -enzyme-preopt=false -inline -mem2reg -instsimplify -gvn -dse -dse -S | FileCheck %s

define void @addOneMem(double* nocapture %x) {
entry:
  %0 = load double, double* %x, align 8
  %add = fadd double %0, 1.000000e+00
  store double %add, double* %x, align 8
  ret void
}

define void @test_derivative(double* %x, double* %xp1, double* %xp2, double* %xp3) {
entry:
  call void (void (double*)*, ...) @__enzyme_fwddiff(void (double*)* nonnull @addOneMem, metadata !"enzyme_width", i64 3, double* %x, double* %xp1, double* %xp2, double* %xp3)
  ret void
}

declare void @__enzyme_fwddiff(void (double*)*, ...)

; CHECK: define {{[^@]+}}@test_derivative(double* [[X:%.*]], double* [[XP1:%.*]], double* [[XP2:%.*]], double* [[XP3:%.*]])
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %"'ipl.i" = load double, double* [[XP1]], align 8
; CHECK-NEXT:    %"'ipl1.i" = load double, double* [[XP2]], align 8
; CHECK-NEXT:    %"'ipl2.i" = load double, double* [[XP3]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load double, double* [[X]], align 8
; CHECK-NEXT:    [[ADD_I:%.*]] = fadd double [[TMP0]], 1.000000e+00
; CHECK-NEXT:    store double [[ADD_I]], double* [[X]], align 8
; CHECK-NEXT:    store double %"'ipl.i", double* [[XP1]], align 8
; CHECK-NEXT:    store double %"'ipl1.i", double* [[XP2]], align 8
; CHECK-NEXT:    store double %"'ipl2.i", double* [[XP3]], align 8
; CHECK-NEXT:    ret void
;

in new function diffecompute_sumabs nonconstant arg float* %0
in new function diffecompute_sumabs nonconstant arg float* %0
in new function diffecompute_sumabs nonconstant arg float* %0
checking if is constant[3]   %call = call float @myabs(float %al)
 < UPSEARCH3>  %call = call float @myabs(float %al)
checking if is constant[1]   %al = load float, float* %a
 < UPSEARCH1>  %al = load float, float* %a
 VALUE nonconst from arg nonconst float* %a
nonconstant(1)  inst   %al = load float, float* %a op float* %a
 Value nonconstant (couldn't disprove)[1]  %al = load float, float* %a
nonconstant(3)  call   %call = call float @myabs(float %al) op   %al = load float, float* %a
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %call1
checking if is constant[2]   %add = fadd float %call, %call1
 < USESEARCH2>  %add = fadd float %call, %call1
checking if is constant[2]   store float %add, float* %ret
couldnt decide nonconstants(2):  store float %add, float* %ret
nonconstant(2) inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </USESEARCH2>  %add = fadd float %call, %call1
couldnt decide nonconstants(2):  %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
checking if is constant[3]   %call1 = call float @myabs(float %bl)
 < UPSEARCH3>  %call1 = call float @myabs(float %bl)
checking if is constant[1]   %bl = load float, float* %b
 < UPSEARCH1>  %bl = load float, float* %b
 VALUE nonconst from arg nonconst float* %b
nonconstant(1)  inst   %bl = load float, float* %b op float* %b
 Value nonconstant (couldn't disprove)[1]  %bl = load float, float* %b
nonconstant(3)  call   %call1 = call float @myabs(float %bl) op   %bl = load float, float* %b
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
checking if is constant[2]   %add = fadd float %call, %call1
 < USESEARCH2>  %add = fadd float %call, %call1
checking if is constant[2]   store float %add, float* %ret
couldnt decide nonconstants(2):  store float %add, float* %ret
nonconstant(2) inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </USESEARCH2>  %add = fadd float %call, %call1
couldnt decide nonconstants(2):  %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
checking if is constant[3]   store float %add, float* %ret
 < UPSEARCH3>  store float %add, float* %ret
checking if is constant[1]   %add = fadd float %call, %call1
 < UPSEARCH1>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[1]  %call = call float @myabs(float %al)
nonconstant(1)  inst   %add = fadd float %call, %call1 op   %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[1]  %add = fadd float %call, %call1
nonconstant(3)  inst   store float %add, float* %ret op   %add = fadd float %call, %call1
checking if is constant[3]   %add = fadd float %call, %call1
 < USESEARCH3>  %add = fadd float %call, %call1
nonconstant(3) inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </USESEARCH3>  %add = fadd float %call, %call1
 < UPSEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[1]  %call = call float @myabs(float %al)
nonconstant(3)  inst   %add = fadd float %call, %call1 op   %call = call float @myabs(float %al)
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 VALUE nonconst from arg nonconst float* %ret
 VALUE nonconst from arg nonconst float* %ret
 VALUE nonconst from arg nonconst float* %ret
 VALUE nonconst from arg nonconst float* %ret
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %add = fadd float %call, %call1
      considering use of   %add = fadd float %call, %call1 -   store float %add, float* %ret
Value nonconstant inst (uses):  %add = fadd float %call, %call1 user   store float %add, float* %ret
 </Value USESEARCH3>  %add = fadd float %call, %call1
 Value nonconstant (couldn't disprove)[3]  %add = fadd float %call, %call1
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
checking if is constant[3]   %bl = load float, float* %b
 < USESEARCH3>  %bl = load float, float* %b
found constant(3)  inst use:  %bl = load float, float* %b user   store float %bl, float* %bl_cache
 < SUBFN myabs> arg:   %bl = load float, float* %b ci:  %call1 = call float @myabs(float %bl)
 <Value USESEARCH2>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH2>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[2]  %call1 = call float @myabs(float %bl)
checking if is constant[3]   %0 = call float @llvm.fabs.f32(float %x)
 < UPSEARCH3>  %0 = call float @llvm.fabs.f32(float %x)
constant(3)  call:  %0 = call float @llvm.fabs.f32(float %x)
 < SUBFN const myabs> arg:   %bl = load float, float* %b ci:  %call1 = call float @myabs(float %bl)
constant(3) inst (uses):  %bl = load float, float* %b
 failed to replace function myabs due to   store float %add, float* %ret
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
in new function fakeaugmented_myabs constant arg float %0
checking if is constant[3]   %0 = call float @llvm.fabs.f32(float %x)
 < UPSEARCH3>  %0 = call float @llvm.fabs.f32(float %x)
constant(3)  call:  %0 = call float @llvm.fabs.f32(float %x)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
subdifferet:1   %call1 = call float @myabs(float %bl)
in new function diffemyabs constant arg float %0
checking if is constant[3]   %0 = call float @llvm.fabs.f32(float %x)
 < UPSEARCH3>  %0 = call float @llvm.fabs.f32(float %x)
constant(3)  call:  %0 = call float @llvm.fabs.f32(float %x)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
 <Value USESEARCH3>  %call1 = call float @myabs(float %bl)
      considering use of   %call1 = call float @myabs(float %bl) -   %add = fadd float %call, %call1
Value nonconstant inst (uses):  %call1 = call float @myabs(float %bl) user   %add = fadd float %call, %call1
 </Value USESEARCH3>  %call1 = call float @myabs(float %bl)
 Value nonconstant (couldn't disprove)[3]  %call1 = call float @myabs(float %bl)
checking if is constant[3]   %al = load float, float* %a
 < USESEARCH3>  %al = load float, float* %a
found constant(3)  inst use:  %al = load float, float* %a user   store float %al, float* %al_cache
 < SUBFN myabs> arg:   %al = load float, float* %a ci:  %call = call float @myabs(float %al)
 <Value USESEARCH2>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %1
 </Value USESEARCH2>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[2]  %call = call float @myabs(float %al)
constant(3) inst (uses):  %al = load float, float* %a
 failed to replace function myabs due to   store float %add, float* %ret
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %1
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %1
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
subdifferet:1   %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %2
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %2
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %3
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %3
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 <Value USESEARCH3>  %call = call float @myabs(float %al)
      considering use of   %call = call float @myabs(float %al) -   %add = fadd float %call, %3
Value nonconstant inst (uses):  %call = call float @myabs(float %al) user   %add = fadd float %call, %3
 </Value USESEARCH3>  %call = call float @myabs(float %al)
 Value nonconstant (couldn't disprove)[3]  %call = call float @myabs(float %al)
 VALUE nonconst from arg nonconst float* %a
 VALUE nonconst from arg nonconst float* %"a'"
 VALUE nonconst from arg nonconst float* %b
 VALUE nonconst from arg nonconst float* %"b'"
 VALUE nonconst from arg nonconst float* %ret
 VALUE nonconst from arg nonconst float* %"ret'"
